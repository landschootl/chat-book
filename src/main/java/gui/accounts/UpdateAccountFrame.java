package gui.accounts;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import domain.User;
import domain.enums.ECrud;
import gui.AppFrame;
import persistence.uow.Observable;
import persistence.uow.Observer;
import service.UserService;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * Classe représentant une fenêtre de modification du compte de l'utilisateur connecté.
 *
 * @author Laurent THIEBAULT & Ludovic LANDSCHOOT
 */
public class UpdateAccountFrame extends AppFrame implements Observable {
    private List<Observer> obs;

    private UserService userService;

    private JPanel mainPanel;
    private JTextField loginTextField;
    private JTextField firstNameTextField;
    private JTextField lastNameTextField;
    private JLabel errorLabel;
    private JButton saveButton;
    private JButton deleteButton;
    private JButton passwordButton;

    public UpdateAccountFrame() {
        this.obs = new ArrayList<>();
        this.userService = UserService.getInstance();
        initComponents();
        initButtons();
        this.setVisible(true);
    }

    /**
     * Initialise les boutons de la fenêtre.
     */
    public void initButtons() {
        saveButton.addActionListener((ActionEvent e) -> {
            if (!fieldsEmpty()) {
                User user = User.builder()
                        .id(userService.getConnectedUser().getId())
                        .login(loginTextField.getText())
                        .firstname(firstNameTextField.getText())
                        .lastname(lastNameTextField.getText())
                        .role(userService.getConnectedUser().getRole())
                        .build();
                try {
                    userService.updateAccount(user);
                    userService.setConnectedUser(user);
                    notif(ECrud.UPDATE);
                    this.dispose();
                    JOptionPane.showMessageDialog(new JFrame(), "Compte mise à jour avec succès.");
                } catch (Exception e1) {
                    JOptionPane.showMessageDialog(new JFrame(), "Erreur lors de la mise à jour de l'utilisateur.");
                    e1.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Veuillez remplir l'ensemble des champs.");
            }
        });

        deleteButton.addActionListener((ActionEvent e) -> {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Etes-vous sûr de vouloir supprimer votre compte ?", "Attention", 0);
            if (dialogResult == JOptionPane.YES_OPTION) {
                userService.delete(userService.getConnectedUser());
                JOptionPane.showMessageDialog(new JFrame(), "Utilisateur supprimé avec succès.");
                notif(ECrud.DELETE);
                userService.setConnectedUser(null);
                this.dispose();
            }
        });

        passwordButton.addActionListener((ActionEvent e) -> new UpdatePasswordAccountFrame(userService.getConnectedUser()));
    }

    /**
     * Permet de savoir si un champ n'est pas rempli.
     * @return
     */
    public boolean fieldsEmpty() {
        return this.loginTextField.getText().isEmpty() ||
                this.firstNameTextField.getText().isEmpty() ||
                this.lastNameTextField.getText().isEmpty();
    }

    @Override
    public void initComponents() {
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        this.setContentPane(mainPanel);

        loginTextField.setText(userService.getConnectedUser().getLogin());
        firstNameTextField.setText(userService.getConnectedUser().getFirstname());
        lastNameTextField.setText(userService.getConnectedUser().getLastname());

        if (userService.getConnectedUser().isAdmin()) {
            loginTextField.setEnabled(true);
        } else {
            loginTextField.setEnabled(false);
        }

        this.setTitle("Mon compte");
        this.setSize(400, 230);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    @Override
    public void addObserver(Observer o) {
        this.obs.add(o);
    }

    @Override
    public void notif(Object o) {
        for (Observer ob : obs)
            ob.action(o);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(10, 3, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(0, 2, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Prénom");
        mainPanel.add(label1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        firstNameTextField = new JTextField();
        mainPanel.add(firstNameTextField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Nom");
        mainPanel.add(label2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lastNameTextField = new JTextField();
        mainPanel.add(lastNameTextField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        errorLabel = new JLabel();
        errorLabel.setForeground(new Color(-3932139));
        errorLabel.setText("");
        mainPanel.add(errorLabel, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Identifiant");
        mainPanel.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginTextField = new JTextField();
        mainPanel.add(loginTextField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Enregistrer");
        mainPanel.add(saveButton, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Supprimer votre compte");
        mainPanel.add(deleteButton, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordButton = new JButton();
        passwordButton.setText("Modifier votre mot de passe");
        mainPanel.add(passwordButton, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
